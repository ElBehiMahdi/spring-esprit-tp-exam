Spring-cheatsheet

Spring starter : 
	spring data JPA
	mysql driver
	spring web 
	spring fox : 
	lombok

First entity :
	
	if you are using lombok : 
		@Getter
		@Setter
		@AllArgsConstructor
		@NoArgsConstructor

	normal code :
	@Entity
	@Table( name = "Client")
	public class Client implements Serializable{
		
		@Id
		@GeneratedValue (strategy = GenerationType.IDENTITY //l'option AUTO-INCREMENT) 
		//Strategy = GenerationType.AUTO 
		//Strategy = GenerationType.TABLE
		//Strategy = GenerationType.SEQUENCE

		@Column(name="idClient")
		private Long idClient; // Clé primaire

		private String nom; 
		private String prenom; 
		private String email; 
		private String password; 
		
		@Temporal(TemporalType.DATE)
		private Date dateNaissance;
		
		@Enumerated(EnumType.STRING)
		private Profession profession;
		
		@Enumerated(EnumType.STRING)
		private CategorieClient categorieClient;
		
		// TIME : 30-09-19 10:50:56.780000000 AM 
		// DATE : 30-09-19 
		// TIMESTAMP : 1569840656 (nbre de secondes entre 01/01/1970 et la date voulue) 
		@Temporal (TemporalType.DATE)
		private Date dateDebut; 

		//Constructeur et accesseurs (getters) et mutateurs (setters) 
	}

Insert a date in the table :

	SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
	Date dateDebut = dateFormat.parse("30/09/2019");

Enum entity : 
	
	public enum Domaine{
		math, informatique, biology
	}

Fichier properties : 

	#Server configuration
 	server.port=8089
 	server.servlet.context-path=/SpringMVC

	#logging configuration
	# Spécifier le fichier externe ou les messages sont stockés
	logging.file=D:/spring_log_file.log 
	# Spécifier la taille maximale du fichier de journalisation
	logging.file.max-size= 100KB
	# spécifier le niveau de Log
	logging.level.root=INFO 
	# Spécifier la forme du message
	logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %-5level - %logger{36} - %msg%n

	### DATABASE ###
	#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/springDB?useUnicode=true&use
	JDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
	spring.datasource.username=root
	spring.datasource.password=

	### JPA / HIBERNATE ###
	spring.jpa.show-sql=true
	spring.jpa.hibernate.ddl-auto=update
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
	spring.mvc.pathmatch.matching-strategy=ant-path-matcher

	

Entity associations : 




	ONE TO ONE :
		One to one unidirectionelle 1 -> 1 :

			T_FORMATION (1)-->(1) T_FORMATION_DETAIL

				@Entity
				@Table(name = "T_FORMATION")
				public class Formation implements Serializable {

					@OneToOne
					private FormationDetail formationDetail;
				}


				@Entity
				@Table(name="T_FORMATION_DETAIL")
				public class FormationDetail implements Serializable {}

		One to one bidirectionelle 1 - 1 : 

			T_FORMATION (1)-(1) T_FORMATION_DETAIL

				@Entity
				@Table(name = "T_FORMATION")
				public class Formation implements Serializable {

					@OneToOne
					private FormationDetail formationDetail;
				}

				@Entity
				@Table(name="T_FORMATION_DETAIL")
				public class FormationDetail implements Serializable {

					@OneToOne(mappedBy="formationDetail")
					private Formation formation; 
				}

	ONE TO MANY :
		Unidirectionnelle :

			T_TP (1) --> (*) T_TP_CORRECTION

				@Entity
				@Table(name = "T_TP")
				public class TravauxPratiques implements Serializable {

					@OneToMany(cascade = CascadeType.ALL)
					private Set<TpCorrection> TpCorrections;
				}

				@Entity
				@Table(name="T_TP_CORRECTION")
				public class TpCorrection implements Serializable {}

		Bidirectionnelle :

			T_TP (1)-(*) T_TP_CORRECTION

				@Entity
				@Table(name = "T_TP")
				public class TravauxPratiques implements Serializable {

					@OneToMany(cascade = CascadeType.ALL, mappedBy="travauxPratiques")
					private Set<TpCorrection> TpCorrections;

				}

				@Entity
				@Table(name="T_TP_CORRECTION")
				public class TpCorrection implements Serializable {

					@ManyToOne
					TravauxPratiques travauxPratiques;
				}

	MANY TO ONE :
		Unidirectionnelle :

			T_TP_CORRECTION (1) --> (*) T_TP

				@Entity
				@Table(name = "T_TP_CORRECTION")
				public class TpCorrection implements Serializable {

					@ManyToOne(cascade = CascadeType.ALL)
					TravauxPratiques travauxPratiques; 
				}

				@Entity
				@Table(name="T_TP")
				public class TravauxPratiques implements Serializable {}

		Bidirectionnelle :

			T_TP_CORRECTION (1)-(*) T_TP

				@Entity
				@Table(name = "T_TP_CORRECTION")
				public class TpCorrection implements Serializable {

					@ManyToOne
					TravauxPratiques travauxPratiques; 

				}

				@Entity
				@Table(name="T_TP")
				public class TravauxPratiques implements Serializable {

					@OneToMany(cascade = CascadeType.ALL, mappedBy="travauxPratiques")
					private Set<TpCorrection> TpCorrections;

				}


	MANY TO MANY :
		Unidirectionnelle :

			T_FORMATION (*) --> (*) T_TP

				@Entity
				@Table(name = "T_FORMATION")
				public class Formation implements Serializable {

					@ManyToMany(cascade = CascadeType.ALL) 
					private Set<TravauxPratiques> formationTps;
				}

				@Entity
				@Table(name="T_TP")
				public class TravauxPratiques implements Serializable {}

		Bidirectionnelle :

			T_FORMATION (*)-(*) T_TP

				@Entity
				@Table(name = "T_FORMATION")
				public class Formation implements Serializable {

					@ManyToMany(cascade = CascadeType.ALL) 
					private Set<TravauxPratiques> formationTps; 

				}

				@Entity
				@Table(name="T_TP")
				public class TravauxPratiques implements Serializable {

					@ManyToMany(mappedBy="formationTps", cascade = CascadeType.ALL) 
					private Set<Formation> formations;

				}



Repository package and interfaces : 

	public interface TestRepository extends JPARepository<entity_name, Long/Integer>{
		//JPQL queries here to use in services
	}



Service package and services : 

	Service interface : 

		public interface TestService {

			//Crud fonctions parameters
			List<Client> retrieveAllClients();
			Client addClient(Client c);
			void deleteClient(Long id);
			Client updateClient(Client c);
			Client retrieveClient(Long id);
		}

	Service implement : 

		@Service
		public class TestServiceImpl implements TestService {

		@Autowired
		TestRepository testRepository;

		//Crud fonctions implementations using repositories and logic

		}



REST Controllers : 

	@RestController
 	@RequestMapping("/client")
 	public class ClientRestController {

		@Autowired
		IClientService clientService;

		//Using Date in parameter :
        @PostMapping("/add-sprint/{Description}/{startDate}/{idProj}")
        @ResponseBody
        public void addproject(@PathVariable("Description") String description,
                               @PathVariable("startDate") @DateTimeFormat(pattern="yyyy-MM-dd") Date startDate,
                               @PathVariable("idProj") int idProject ) {

            service.addSprintAndAssignToProject(description, startDate, idProject);
        }

		@GetMapping("/retrieve-all-clients")
		@ResponseBody
		public List<Client> getClients() {
		List<Client> listClients = clientService.retrieveAllClients();
		return listClients;

		@GetMapping("/retrieve-client/{client-id}")
		@ResponseBody
		public Client retrieveClient(@PathVariable("client-id") Long clientId) {
		return clientService.retrieveClient(clientId);
		}
		 
		@PostMapping("/add-client")
		@ResponseBody
		public Client addClient(@RequestBody Client c) {
			Client client = clientService.addClient(c);
			return client
		}

 		@DeleteMapping("/remove-client/{client-id}")
 		@ResponseBody
 		public void removeClient(@PathVariable("client-id") Long clientId) {
 			clientService.deleteClient(clientId);
 		}

 		@PutMapping("/modify-client")
 		@ResponseBody
 		public Client modifyClient(@RequestBody Client client) {
 			return clientService.updateClient(client);
 		}
 	}



ASPECTS :
	**lombock is needed 
	in Service implement class : add this annotation from "import lombok.extern.slf4j.Slf4j";

		@Slf4j
		public class ServiceImpl implements Service{

			public void getDataCenters(){
		        for (Datacenter datacenter:listerDatacenter()){
		            log.info("Data Center : "+datacenter.getRegion());
		            for (VirtualMachine vm:datacenter.getVms()){
		                log.info("OS :"+vm.getOs());
		            }
		        }
		    }
	    }

    Aspect de Journalisation (logs) à la classe service StockService

    package tn.esprit.esponline.config;
	@Component
	@Aspect
	public class LoggingAspect {
		private static final Logger l = LogManager.getLogger(LoggingAspect.class);
		
		@Before("execution(* tn.esprit.esponline.service.StockServiceImpl.*(..))")
		public void logMethodEntry(JoinPoint joinPoint) {
			String name = joinPoint.getSignature().getName();
			logger.info("In method " + name + " : ");
		}
		@After("….....")
		public void logMethodExit….
	}

	classe PerformanceAspect, créer un aspect qui permet de calculer et afficher dans les logs, la durée 
	d’exécution de chaque méthode appelée de la couche service

	@Around("execution(* tn.esprit.spring.service.*.*(..))")
	public Object profile(ProceedingJoinPoint pjp) throws Throwable {
		long start = System.currentTimeMillis(); 
		Object obj = pjp.proceed(); 
		long elapsedTime = System.currentTimeMillis() - start;
		l.info("Method execution time: " + elapsedTime + " milliseconds.");
		return obj; 
	}



CRON :

	0 * * * *	every hour
	*/15 * * * *	every 15 mins
	0 */2 * * *	every 2 hours
	0 18 * * 0-6	every week Mon-Sat at 6pm
	10 2 * * 6,7	every Sat and Sun on 2:10am
	0 0 * * 0	every Sunday midnight

	*	all values
	,	separate individual values
	-	a range of values
	/	divide a value into steps

	pour activer scheduling ajouter dans SpringbootApplication :

		@EnableScheduling
		@SpringBootApplication
		public class TpStockProjectApplication {
			public static void main(String[] args) {
				SpringApplication.run(TpStockProjectApplication.class, args);
			}
		}

		fixed rate execute les tache a des intervalles periodiques 

			@Scheduled(fixedRate = 60000)
				public void fixedRateMethod() {
				system.out.println("Method with fixed Rate");
			}

		fixed delay 

			@Scheduled(fixedDelay = 60000)
				public void fixedDelayMethod() {
				system.out.println("Method with fixed delay");
			}


			second(0-59) / minutes(059) / heure(0-23) / jour(0-31) / mois(0-12 or JAN-DEC) / jour de semaine (0-7 or MON-SUN)

			@Scheduled(cron = "*/60 * * * * *" )
				public void cronMethod() {
				system.out.println("Method with cron expression");
			}



Swagger integration for testing : 

		<dependency>
            <groupId>io.springfox</groupId>
            <artifactId> springfox-boot-starter </artifactId>
            <version> 3.0.0 </version>
        </dependency>

	@EnableSwagger2 <--- dans la class main
	@SpringbootApplication 

	configuration package containing SwaggerConfig class:

		@Configuration
		public class SwaggerConfig {
	    	@Bean
		    public Docket api() {
		        return new Docket(DocumentationType.SWAGGER_2)
		                .select()

		                //.apis(RequestHandlerSelectors.any()) //any: documenter toutes les classes dans tous les   packages
		                
		                .apis(RequestHandlerSelectors.basePackage("tn.esprit.behimahdi")) //basePackage permet de demander à Swagger de ne rien documenter en dehors du package "com.esprit.examen".

		                .paths(PathSelectors.any())
		                
		                //.paths(PathSelectors.regex("/SpringMVC/client.*")) // accepte seulement les URIs qui commençent client.

		                .build().apiInfo(apiInfo());//Informations personnalisées
		        		//.build();
	    		}


		    private ApiInfo apiInfo() {
		        return new ApiInfoBuilder()
		                .title("Swagger Configuration for EXAMEN")
		                .description("\"Spring Boot Swagger configuration\"")
		                .version("1.1.0")
		                .build();
		    }
	   	}

	test swagger by inputing : http://localhost:8089/SpringMVC/swagger-ui/index.html
 
	Informations personnalisées : 

		in config file :

			@Bean
			public Docket api() {
				return new Docket(DocumentationType.SWAGGER_2)
			 	...
			 	.build().apiInfo(apiInfo());
			}

			private ApiInfo apiInfo () {
				return new ApiInfoBuilder()
				.title("Swagger Configuration for tpStockProject")
				.description("\"Spring Boot Swagger configuration\"")
				.version("1.1.0").build();
			}

	API tags in REST controller :

		@RestController
		@Api(tags = "Client management") <---
		@RequestMapping("/client")
		public class RestController {

			...
			@ResponseBody
			@GetMapping('...')
			@ApiOperation(value = "Récupérer la liste des clients") <---

		} 


